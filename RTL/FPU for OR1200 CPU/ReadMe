# Goals/objectives

The goal of this project is to modify (pipeline) the current FPU arithmetic components in the OR1200 CPU so that pipeline stalls due to floating point arithmetic operations shall be reduced as much as possible. The floating point arithmetic functions currently implemented as serial components in OR1200 include: floating point add, sub, multiply, and divide. Other floating point components such as floating point comparison and conversion functions may not be included in this project due to the complexity. It is expected to achieve significant FLOPS improvement compared to current serial implementation.

# Motivation

Floating point unit has wide dynamic range of representable data and easy programming model, providing better precision than fixed point number system. In fact, various applications requires of using floating point unit, and the performance of floating point operations (FLOPS) is one of the major performance measure for a microprocessor. Current FPU on OR1200 CPU is implemented as serial components, therefore for each floating point operation, the pipeline inevitably stalls and wait for the floating point operation to be finished. According to the OR1200 specifications, the stall could take up to 38 clock cycles for floating point division operations. This result in very poor floating point operation performance and may significantly limit the potential application domain for OR1200 CPU. By implementing a pipelined FPU and integrate with the current integer pipeline, the floating point performance could be significantly improved. The OR1200 CPU will no longer be limited mostly to integer applications.


